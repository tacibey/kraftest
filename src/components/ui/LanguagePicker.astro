---
import { languages } from "@utils//ui";
import Icon from "./icons/Icon.astro";
---

<div class="hs-dropdown relative inline-flex">
  <button
    id="hs-dropdown-default"
    type="button"
    aria-label="Change language"
    class="hs-dropdown-toggle inline-flex items-center gap-x-2 rounded-lg px-1.5 py-1.5 text-sm font-medium text-neutral-600 outline-hidden ring-zinc-500 transition duration-300 hover:bg-neutral-200 hover:text-orange-400 dark:border-neutral-700 dark:text-neutral-400 dark:ring-zinc-200 dark:hover:bg-neutral-700 dark:hover:text-orange-300 dark:focus:outline-hidden"
  >
    <Icon name="earth" />
    <svg
      class="size-4 hs-dropdown-open:rotate-180"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"><path d="m6 9 6 6 6-6"></path></svg
    >
  </button>

  <div
    class="hs-dropdown-menu duration left-[20%]! top-[98%]! mt-2 hidden transform-none! rounded-lg bg-neutral-50 p-2 opacity-0 shadow-md transition-[opacity,margin] before:absolute before:-top-4 before:start-0 before:h-4 before:w-full after:absolute after:-bottom-4 after:start-0 after:h-4 after:w-full hs-dropdown-open:opacity-100 dark:divide-neutral-700 dark:border dark:border-neutral-700 dark:bg-neutral-800 md:left-[90%]! md:top-[80%]!"
    aria-labelledby="hs-dropdown-hover-event"
  >
    {
      // Map through the list of languages, creating a link for each language
      Object.entries(languages).map(([lang, label]) => (
        <a
          class="flex items-center gap-x-3.5 rounded-lg px-3 py-2 text-sm text-neutral-800 hover:bg-neutral-100 focus:bg-neutral-100 focus:outline-hidden dark:text-neutral-400 dark:hover:bg-neutral-700 dark:hover:text-neutral-300 dark:focus:bg-neutral-700"
          href={`/${lang === "en" ? "" : lang}`}
        >
          {label}
        </a>
      ))
    }
  </div>
</div>

      
<script>
  // Desteklenen tüm dil kodları için bir tip (type alias) tanımlayın.
  type TLanguage = "en" | "fr" | "es" | "ru" | "de" | "pt" | "it";

  // Desteklenen tüm dil kodlarını içeren bir dizi. Bu, URL'lerden dil kodlarını filtrelemek için kullanılır.
  const supportedLanguages: TLanguage[] = ["en", "fr", "es", "ru", "de", "pt", "it"];

  document.addEventListener("DOMContentLoaded", function () {
    // Sadece dil seçici menüsündeki linkleri hedef al.
    const languageLinks = document.querySelectorAll<HTMLAnchorElement>(".hs-dropdown-menu[aria-labelledby='hs-dropdown-hover-event'] a");

    languageLinks.forEach((linkElement) => {
      // Link elementine tıklama olayı ekle.
      linkElement.addEventListener("click", function (event) {
        event.preventDefault(); // Normal link davranışını engelle.

        const targetHref = linkElement.getAttribute("href");
        if (targetHref === null) return; // Hedef URL yoksa çık.

        // Hedef dil kodunu URL'den al ('/fr' -> 'fr', '/' -> '').
        const targetLangCode = targetHref.replace(/^\//, '') as TLanguage | "";

        const currentUrl = new URL(window.location.href);
        const currentPathname = currentUrl.pathname;

        // Mevcut URL yolunu '/' karakterine göre böl ve filtrele.
        // Boş kısımları ve bilinen dil kodlarını çıkararak mevcut içeriğin yolunu bul.
        const currentPathParts = currentPathname
          .split('/')
          .filter(part => part && !(supportedLanguages as string[]).includes(part));
        const contentPath = currentPathParts.join('/'); // İçerik yolu (örn: 'blog/benim-yazim')

        let newPath = "";

        // Eğer hedef dil varsayılan dil ('en') değilse ve boş değilse, dil önekini ekle.
        if (targetLangCode && targetLangCode !== "en") {
          // Dil kodunu ekle, eğer içerik yolu varsa onu da / ile ekle.
          newPath = `/${targetLangCode}${contentPath ? '/' + contentPath : ''}`;
        } else {
          // Hedef dil 'en' (veya tanımsız) ise, sadece içerik yolunu (varsa / ile) kullan.
          newPath = `/${contentPath}`;
        }

        // Oluşan yoldaki çoklu '/' karakterlerini tek '/' ile değiştir.
        newPath = newPath.replace(/\/+/g, "/");
        // Eğer yol boş kaldıysa (sadece '/' olmalıydı) veya sadece '/' ise, kök dizin olarak ayarla.
        if (newPath === "" || newPath === "/") newPath = "/";

        // Yeni oluşturulan URL'ye yönlendir (sayfanın search query'sini koruyarak).
        window.location.href = `${currentUrl.origin}${newPath}${currentUrl.search}`;
      });
    });
  });
</script>
    
